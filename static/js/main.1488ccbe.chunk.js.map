{"version":3,"sources":["components/heaader/Header.js","components/content/home/Home.tsx","api/api.ts","redux/repair-reducer.ts","components/content/repair/Repair.tsx","components/content/repair/RepairsContainer.tsx","components/content/new_repair/SavedRepairs.tsx","redux/savedrepair-reducer.ts","components/content/new_repair/SavedRepairContainer.tsx","components/content/Content.tsx","App.js","serviceWorker.js","redux/redux-store.ts","index.js"],"names":["Header","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","activeClassName","eventKey","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","React","Component","Home","render","ZakupkiRepairAPI","axios","get","SERVER","then","response","data","procedure","method","url","console","log","catch","error","SavedRepairApi","page","initialState","isFetching","repairs","repairReducer","state","action","undefined","newRepairs","filter","repair","uin","deleteRepairs","setToggleFetching","Repair","successHandler","e","props","saveRepairsToZakupkiThunkCreator","needed","needlesHandler","Container","this","lawNumber","author","placementPhase","posted","updated","initialContractprice","name","placementStages","link","onClick","RepairsContainer","map","getRepairsFromZakupkiThunkCreator","mapDispatchToProps","dispatch","getState","a","compose","connect","repairContent","SavedRepairs","saveRepair","deadline","saveRepairs","pageNumber","pageSize","totalElements","totalPages","savedRepairReducer","newTotalElements","newTotalPages","SavedRepairContainer","alert","getSavedRepairsFromZakupkiThunkCreator","saveRep","content","savedRepairContent","Content","path","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","customHistory","createBrowserHistory","ReactDOM","history","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1488ccbe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Button, Form, FormControl, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\r\n\r\n\r\nclass Header extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"#home\">ZakupkiReader</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href=\"/\" activeClassName=\"active\" eventKey=\"/\">Home</Nav.Link>\r\n\r\n                            <Nav.Link href=\"#link\">Link</Nav.Link>\r\n                            <NavDropdown title=\"Repaire\" id=\"basic-nav-dropdown\">\r\n                                <NavDropdown.Item href=\"/repair\" activeClassName=\"active\"\r\n                                                  eventKey=\"/\">Repaire</NavDropdown.Item>\r\n                                <NavDropdown.Item href=\"/newrepair\" eventKey=\"/\">Saved repair\r\n                                    procedures</NavDropdown.Item>\r\n                                <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                                <NavDropdown.Divider/>\r\n                                <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                            </NavDropdown>\r\n                        </Nav>\r\n                        <Form inline>\r\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>\r\n                            <Button variant=\"outline-success\">Search</Button>\r\n                        </Form>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import * as React from \"react\";\r\n\r\n\r\nclass Home extends React.Component {\r\n    render = () => {\r\n        return (\r\n            <>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import axios, {AxiosResponse} from 'axios';\r\nimport {PageType, ProcedureType, RepairType} from \"../types/datatypes\";\r\n\r\nconst ali=\"http://8.209.73.85:8080/12\";\r\nconst localhost =\"http://localhost:8080\";\r\nconst SERVER =ali;\r\nconst GET_REPAIR_PROCEDURE_FROM_ZAKUPKI_ENDPOINT = \"/goszakupki/repair/\";\r\nconst SAVE_REPAIR_PROCEDURE_TO_ZAKUPKI_ENDPOINT = \"/base/repair/\";\r\nconst GET_ALL_SAVED_REPAIR_PROCEDURE_TO_ZAKUPKI_ENDPOINT = \"/base/repair/get_all\";\r\n\r\n\r\nexport const ZakupkiRepairAPI = {\r\n    getAllNew() {\r\n        let address = SERVER + GET_REPAIR_PROCEDURE_FROM_ZAKUPKI_ENDPOINT;\r\n        // let sessionId = localStorage.getItem('sessionId');\r\n        return axios.get(address,\r\n            // {headers: {sessionId: sessionId}}\r\n        ).then((response: AxiosResponse<Array<RepairType>>) => {\r\n            return response.data;\r\n        });\r\n    },\r\n\r\n    saveProcedure(procedure: ProcedureType) {\r\n        let address = SERVER + SAVE_REPAIR_PROCEDURE_TO_ZAKUPKI_ENDPOINT;\r\n        // let sessionId = localStorage.getItem('sessionId');\r\n\r\n        return axios({\r\n            method: 'POST',\r\n            url: address,\r\n            data: procedure\r\n        }).then(function (response) {\r\n            console.log(response);\r\n        })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    },\r\n\r\n};\r\n\r\nexport const SavedRepairApi = {\r\n    getAll(page: PageType) {\r\n        let address = SERVER + GET_ALL_SAVED_REPAIR_PROCEDURE_TO_ZAKUPKI_ENDPOINT;\r\n        // let sessionId = localStorage.getItem('sessionId');\r\n\r\n        return axios({\r\n            method: 'POST',\r\n            url: address,\r\n            data: page\r\n        }).then(function (response) {\r\n            console.log(response);\r\n            return response.data\r\n        })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    },\r\n}\r\n","import {ZakupkiRepairAPI} from \"../api/api\";\r\nimport {ProcedureType, RepairsType, RepairType} from \"../types/datatypes\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst SET_REPAIRS = \"SET_REPAIRS\";\r\nconst SET_FETCHING = \"SET_FETCHING\";\r\nconst DELETE_REPAIR_BY_UIN = \"DELETE_REPAIR_BY_UIN\";\r\n\r\ntype InitialStateType = {\r\n    isFetching: IsFetchingType,\r\n    repairs: RepairsType\r\n}\r\n\r\ntype IsFetchingType = boolean;\r\n\r\ntype ActionsTypes = SetRepairsType | DeleteRepairsType | SetToggleFetchingType\r\n\r\nconst initialState: InitialStateType = {\r\n    isFetching: false,\r\n    repairs: []\r\n}\r\n\r\nlet repairReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_REPAIRS: {\r\n            return {\r\n                ...state,\r\n                repairs: action.repairs\r\n            }\r\n        }\r\n        case SET_FETCHING: {\r\n            if (action.isFetching !== undefined) {\r\n                return {\r\n                    ...state,\r\n                    isFetching: action.isFetching\r\n                }\r\n            } else\r\n                return {\r\n                    ...state\r\n                }\r\n        }\r\n        case DELETE_REPAIR_BY_UIN: {\r\n            let newRepairs: Array<RepairType> | null = null;\r\n            if (action.procedure !== undefined) {\r\n\r\n                if (state.repairs) {\r\n                    newRepairs = state.repairs.filter((repair) => {\r\n                        // @ts-ignore\r\n                        return repair.uin !== action.procedure.uin;\r\n                    });\r\n                }\r\n\r\n                return {\r\n                    ...state,\r\n                    repairs: newRepairs\r\n                }\r\n            } else\r\n                return {\r\n                    ...state\r\n                }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n\r\n    }\r\n}\r\nexport default repairReducer;\r\n\r\ntype SetRepairsType = {\r\n    type: typeof SET_REPAIRS,\r\n    repairs: RepairType[]\r\n}\r\n\r\ntype DeleteRepairsType = {\r\n    type: typeof DELETE_REPAIR_BY_UIN,\r\n    procedure: ProcedureType\r\n}\r\n\r\ntype SetToggleFetchingType = {\r\n    type: typeof SET_FETCHING,\r\n    isFetching: IsFetchingType\r\n}\r\n\r\nexport const setRepairs = (repairs: RepairType[]): SetRepairsType => ({type: SET_REPAIRS, repairs});\r\nexport const deleteRepairs = (procedure: ProcedureType): DeleteRepairsType => ({type: DELETE_REPAIR_BY_UIN, procedure});\r\n\r\nexport const setToggleFetching = (isFetching: boolean): SetToggleFetchingType => ({\r\n    type: SET_FETCHING,\r\n    isFetching: isFetching\r\n});\r\n\r\n\r\ntype GetStateType = () => AppStateType;\r\ntype DispatchType = Dispatch<ActionsTypes>\r\n\r\nexport const getRepairsFromZakupkiThunkCreator = (): ThunkAction<Promise<void>, AppStateType, any, ActionsTypes> => {\r\n    return async (dispatch, getState ) => {\r\n        dispatch(setToggleFetching(true));\r\n        ZakupkiRepairAPI.getAllNew().then(function (data: any) {\r\n            dispatch(setRepairs(data));\r\n            dispatch(setToggleFetching(false));\r\n        });\r\n    }\r\n};\r\n\r\nexport const saveRepairsToZakupkiThunkCreator = (procedure: ProcedureType): ThunkAction<Promise<void>, AppStateType, any, ActionsTypes> => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(setToggleFetching(true));\r\n        ZakupkiRepairAPI.saveProcedure(procedure).then(function (data: any) {\r\n            dispatch(deleteRepairs(procedure));\r\n            dispatch(setToggleFetching(false));\r\n        });\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport {Button, Container} from \"react-bootstrap\";\r\nimport {ProcedureType, RepairType} from \"../../../types/datatypes\";\r\n\r\n\r\ntype PropsType = {\r\n    repair: RepairType,\r\n    saveRepairsToZakupkiThunkCreator: (procedure: ProcedureType) => void\r\n}\r\n\r\nclass Repair extends React.Component<PropsType> {\r\n    successHandler = (e: any) => {\r\n\r\n        this.props.saveRepairsToZakupkiThunkCreator({\r\n            id: this.props.repair.id,\r\n            needed: true,\r\n            uin: this.props.repair.uin\r\n        })\r\n    }\r\n\r\n    needlesHandler = (e: any) => {\r\n        this.props.saveRepairsToZakupkiThunkCreator({\r\n            id: this.props.repair.id,\r\n            needed: false,\r\n            uin: this.props.repair.uin\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <span> {this.props.repair.id} </span>\r\n                    <span> {this.props.repair.needed} </span>\r\n                    <span> {this.props.repair.lawNumber} </span>\r\n                    <span> {this.props.repair.author} </span>\r\n                    <span> {this.props.repair.placementPhase} </span>\r\n                    <span> {this.props.repair.posted} </span>\r\n                    <span> {this.props.repair.updated} </span>\r\n                    <span> {this.props.repair.initialContractprice} </span>\r\n                    <span> {this.props.repair.name} </span>\r\n                    <span> {this.props.repair.placementStages} </span>\r\n                    <span> {this.props.repair.link} </span>\r\n                    <span> {this.props.repair.uin} </span>\r\n                    <Button variant=\"success\" onClick={this.successHandler}>Necessary</Button>\r\n                    <Button variant=\"danger\" onClick={this.needlesHandler}>Needless</Button>\r\n                    <Button variant=\"secondary\">Secondary</Button>\r\n\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Repair\r\n","import * as React from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {getRepairsFromZakupkiThunkCreator, saveRepairsToZakupkiThunkCreator} from \"../../../redux/repair-reducer\";\r\nimport Repair from \"./Repair\";\r\nimport {ProcedureType, RepairsType, RepairType} from \"../../../types/datatypes\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype PropsType = {\r\n    repairs: RepairsType\r\n    saveRepairsToZakupkiThunkCreator: (procedure: ProcedureType) => void\r\n    getRepairsFromZakupkiThunkCreator: () => void\r\n}\r\n\r\nclass RepairsContainer extends React.Component <PropsType> {\r\n    props: any;\r\n\r\n    componentDidMount() {\r\n        this.props.getRepairsFromZakupkiThunkCreator()\r\n    }\r\n\r\n    render = () => {\r\n        return (\r\n\r\n            this.props.repairs.map((repair: RepairType) => {\r\n                    return (\r\n\r\n                        <Repair repair={repair}\r\n                            saveRepairsToZakupkiThunkCreator={this.props.saveRepairsToZakupkiThunkCreator}/>\r\n                    )\r\n                }\r\n            )\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    repairs: RepairsType\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        repairs: state.repairContent.repairs\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getRepairsFromZakupkiThunkCreator,\r\n    saveRepairsToZakupkiThunkCreator\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps))\r\n(RepairsContainer);\r\n","import React from \"react\";\r\nimport {SaveRepairType} from \"../../../types/datatypes\";\r\nimport {Container} from \"react-bootstrap\";\r\n\r\ntype PropsType = {\r\n    saveRepair: SaveRepairType\r\n}\r\n\r\nclass SavedRepairs extends React.Component <PropsType> {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Container>\r\n                    <span>{this.props.saveRepair.deadline}</span>\r\n                    <span>{this.props.saveRepair.name}</span>\r\n                    <span>{this.props.saveRepair.uin}</span>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SavedRepairs;\r\n","import {PageType, SaveRepairTypes} from \"../types/datatypes\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {SavedRepairApi} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_REPAIRS = \"SET_REPAIRS\";\r\nconst SET_TOTAL_ELEMENTS_NUMBER = \"SET_TOTAL_ELEMENTS_NUMBER\";\r\nconst SET_TOTAL_PAGES_NUMBER = \"SET_TOTAL_PAGES_NUMBER\";\r\nconst SET_FETCHING = \"SET_FETCHING\";\r\n\r\ntype InitialStateType = {\r\n    isFetching: IsFetchingType,\r\n    saveRepairs: SaveRepairTypes,\r\n    page: PageType,\r\n    totalElements: number,\r\n    totalPages: number\r\n}\r\n\r\ntype IsFetchingType = boolean;\r\n\r\ntype SetRepairsType = {\r\n    type: typeof SET_REPAIRS,\r\n    saveRepairs: SaveRepairTypes\r\n}\r\n\r\ntype SetToggleFetchingType = {\r\n    type: typeof SET_FETCHING,\r\n    isFetching: IsFetchingType\r\n}\r\n\r\ntype SetTotalElementsNumberType = {\r\n    type: typeof SET_TOTAL_ELEMENTS_NUMBER,\r\n    newTotalElements: number\r\n}\r\ntype SetTotalPagesType = {\r\n    type: typeof SET_TOTAL_PAGES_NUMBER,\r\n    newTotalPages: number\r\n}\r\n\r\ntype ActionsTypes = SetRepairsType | SetToggleFetchingType | SetTotalElementsNumberType | SetTotalPagesType\r\n\r\nconst initialState: InitialStateType = {\r\n    isFetching: false,\r\n    saveRepairs: [],\r\n    page: {pageNumber: 0, pageSize: 10},\r\n    totalElements: 0,\r\n    totalPages: 0\r\n}\r\n\r\nlet savedRepairReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_REPAIRS: {\r\n            return {\r\n                ...state,\r\n                saveRepairs: action.saveRepairs\r\n            }\r\n        }\r\n        case SET_FETCHING: {\r\n            if (action.isFetching !== undefined) {\r\n                return {\r\n                    ...state,\r\n                    isFetching: action.isFetching\r\n                }\r\n            } else\r\n                return {\r\n                    ...state\r\n                }\r\n        }\r\n\r\n        case SET_TOTAL_ELEMENTS_NUMBER: {\r\n            return {\r\n                ...state,\r\n                totalElements: action.newTotalElements\r\n            }\r\n        }\r\n        case SET_TOTAL_PAGES_NUMBER: {\r\n            return {\r\n                ...state,\r\n                totalPages: action.newTotalPages\r\n            }\r\n        }\r\n        // case DELETE_REPAIR_BY_UIN: {\r\n        //     let newRepairs: Array<RepairType> | null = null;\r\n        //     if (action.procedure != undefined) {\r\n        //\r\n        //         if (state.repairs) {\r\n        //             newRepairs = state.repairs.filter((repair) => {\r\n        //                 // @ts-ignore\r\n        //                 return repair.uin != action.procedure.uin;\r\n        //             });\r\n        //         }\r\n        //\r\n        //         return {\r\n        //             ...state,\r\n        //             repairs: newRepairs\r\n        //         }\r\n        //     } else\r\n        //         return {\r\n        //             ...state\r\n        //         }\r\n        // }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const setRepairs = (saveRepairs: SaveRepairTypes): SetRepairsType => ({type: SET_REPAIRS, saveRepairs});\r\nexport const setTotalElements = (newTotalElements: number): SetTotalElementsNumberType => ({\r\n    type: SET_TOTAL_ELEMENTS_NUMBER,\r\n    newTotalElements\r\n});\r\nexport const setTotalPages = (newTotalPages: number): SetTotalPagesType => ({\r\n    type: SET_TOTAL_PAGES_NUMBER,\r\n    newTotalPages\r\n});\r\n// export const deleteRepairs = (procedure: ProcedureType): DeleteRepairsType => ({type: DELETE_REPAIR_BY_UIN, procedure});\r\n\r\nexport const setToggleFetching = (isFetching: boolean): SetToggleFetchingType => ({\r\n    type: SET_FETCHING,\r\n    isFetching: isFetching\r\n});\r\n\r\n\r\ntype GetStateType = () => AppStateType;\r\ntype DispatchType = Dispatch<ActionsTypes>;\r\n\r\nexport const getSavedRepairsFromZakupkiThunkCreator = (page: PageType): ThunkAction<Promise<void>, AppStateType, any, ActionsTypes> => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(setToggleFetching(true));\r\n        SavedRepairApi.getAll(page).then(function (data: any) {\r\n            dispatch(setRepairs(data.content));\r\n            dispatch(setTotalElements(data.totalElements))\r\n            dispatch(setTotalPages(data.totalPages));\r\n            dispatch(setToggleFetching(false));\r\n        });\r\n    }\r\n};\r\n\r\nexport default savedRepairReducer;\r\n","import React from 'react';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {PageType, SaveRepairType, SaveRepairTypes} from \"../../../types/datatypes\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport SavedRepairs from \"./SavedRepairs\";\r\nimport {getSavedRepairsFromZakupkiThunkCreator} from \"../../../redux/savedrepair-reducer\";\r\n\r\n\r\nclass SavedRepairContainer extends React.Component<any> {\r\n    props:any;\r\n\r\n    componentDidMount() {\r\n        alert(\"gffgh\");\r\n        this.props.getSavedRepairsFromZakupkiThunkCreator(this.props.page);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n                this.props.saveRepairs.map((saveRep: SaveRepairType) => {\r\n                    return (\r\n                        <SavedRepairs\r\n                            saveRepair={saveRep}/>\r\n                    )\r\n                })\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    saveRepairs: SaveRepairTypes,\r\n    page: PageType\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        saveRepairs: state.savedRepairContent.saveRepairs,\r\n        page: state.savedRepairContent.page\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    getSavedRepairsFromZakupkiThunkCreator\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(SavedRepairContainer);\r\n","import React from \"react\";\r\nimport Home from \"./home/Home\";\r\nimport {Route} from \"react-router-dom\";\r\nimport RepairsContainer from \"./repair/RepairsContainer\";\r\nimport SavedRepairContainer from \"./new_repair/SavedRepairContainer\";\r\n\r\nclass Content extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Route path=\"/\" render={() => <Home/>}/>\r\n                <Route path=\"/repair\" render={() => <RepairsContainer/>}/>\r\n                <Route path=\"/newrepair\" render={() => <SavedRepairContainer/>}/>\r\n\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Content;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"./components/heaader/Header\";\r\nimport Content from \"./components/content/Content\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Content/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport repairReducer from \"./repair-reducer\";\r\nimport savedRepairReducer from \"./savedrepair-reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    repairContent: repairReducer,\r\n    savedRepairContent:savedRepairReducer\r\n});\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {createBrowserHistory} from \"history\";\r\n\r\nconst customHistory = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <BrowserRouter history={customHistory}>\r\n      <Provider store={store}>\r\n    <App />\r\n      </Provider>\r\n    </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}